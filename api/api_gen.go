// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Todo defines model for Todo.
type Todo struct {
	Description *string `json:"description,omitempty"`
	Done        *bool   `json:"done,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Status      *string `json:"status,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody = Todo

// PutTodosIdJSONRequestBody defines body for PutTodosId for application/json ContentType.
type PutTodosIdJSONRequestBody = Todo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all todos
	// (GET /todos)
	GetTodos(ctx echo.Context) error
	// Create a new todo
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// Delete a todo by ID
	// (DELETE /todos/{id})
	DeleteTodosId(ctx echo.Context, id int) error
	// Get a todo by ID
	// (GET /todos/{id})
	GetTodosId(ctx echo.Context, id int) error
	// Update a todo by ID
	// (PUT /todos/{id})
	PutTodosId(ctx echo.Context, id int) error
	// Mark a todo as done
	// (PATCH /todos/{id}/done)
	PatchTodosIdDone(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// DeleteTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodosId(ctx, id)
	return err
}

// GetTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodosId(ctx, id)
	return err
}

// PutTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTodosId(ctx, id)
	return err
}

// PatchTodosIdDone converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTodosIdDone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTodosIdDone(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.DELETE(baseURL+"/todos/:id", wrapper.DeleteTodosId)
	router.GET(baseURL+"/todos/:id", wrapper.GetTodosId)
	router.PUT(baseURL+"/todos/:id", wrapper.PutTodosId)
	router.PATCH(baseURL+"/todos/:id/done", wrapper.PatchTodosIdDone)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTY/TMBD9K9bAMdp0gVNuZSuhHkB7WE6IgxtPWy+Jx9gTUFXlvyOPU7VNIj4O3QOn",
	"uG/s5H34qUeoqfXk0HGE6gix3mOrZflEhtLTB/IY2KKgBmMdrGdLLv3kg0eoIHKwbgd9AYYcXgw2RA1q",
	"lybWXODWMe4wJDyy5i7OvowtNzgzSaOM0OYZa4Y+QdZthfBwSgSo5eMaCviBIQpjuL9b3C3Su8mj095C",
	"BW8FKsBr3guPksmQrHbI6ZEM0Eny2kAFH5CfZEMBAaMnF7M1bxaL9KjJMTo5p71vbC0ny+eYHcsOp5Vl",
	"bOXg64BbqOBVec6iHIIoJYWzXh2CPmS5V0nAUjU2sqKtyuTTjti1rQ6HTFnppjnNCvAUZ5Q9UryQ9r3D",
	"yO/JHP5J1Z/FTMlLUkyqDqgZh4/bgAYqDh32E6Pvb07pQaiYkY8ZVVo5/Clmyjzfl/JoTZ8r0iDj1N2V",
	"4OLv2sh9C7pFxhCh+nIEmz6b7iAU4HQrLTETL4oLXeMu9V8nRr2bdBY+kXoYnLsWl/kpLcLU5qDWq3RV",
	"ftuBFxOyuHniSxWt2zV4znXUn5EvvptrUHd7X16+l503f9fL26f0WaiMe5nRUUTXzSxP/0xec72fSS7B",
	"Q3artPV/udfzjn3U4dvJLx2VmNP3ff8rAAD//1fEek8RCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
